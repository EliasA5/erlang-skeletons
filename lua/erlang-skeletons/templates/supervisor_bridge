%%%-------------------------------------------------------------------
%%% @author $author $user
%%% @copyright (C) $year, $company
%%% @doc
%%%
%%% @end
%%% Created: $fulldate
%%%-------------------------------------------------------------------
-module($basename).

-behaviour(supervisor_bridge).

%% API
-export([start_link/0]).

%% supervisor_bridge callbacks
-export([init/1, terminate/2]).

-define(SERVER, ?MODULE).

-record(state, {}).

%%%===================================================================
%%% API
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% Starts the supervisor bridge
%% @end
%%--------------------------------------------------------------------
-spec start_link() -> {ok, Pid :: pid()} |
	  {error, {already_started, Pid :: pid()}} |
	  {error, term()} |
	  ignore.
start_link() ->
    supervisor_bridge:start_link({local, ?SERVER}, ?MODULE, []).

%%%===================================================================
%%% supervisor_bridge callbacks
%%%===================================================================

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Creates a supervisor_bridge process, linked to the calling process,
%% which calls Module:init/1 to start the subsystem. To ensure a
%% synchronized start-up procedure, this function does not return
%% until Module:init/1 has returned.
%% @end
%%--------------------------------------------------------------------
-spec init(Args :: term()) -> {ok, Pid :: pid(), State :: term()} |
	  {error, Error :: term()} |
	  ignore.
init([]) ->
    case 'AModule':start_link() of
	{ok, Pid} ->
	    {ok, Pid, #state{}};
	Error ->
	    Error
    end.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% This function is called by the supervisor_bridge when it is about
%% to terminate. It should be the opposite of Module:init/1 and stop
%% the subsystem and do any necessary cleaning up.The return value is
%% ignored.
%% @end
%%--------------------------------------------------------------------
-spec terminate(Reason :: shutdown | term(), State :: term()) -> any().
terminate(_Reason, _State) ->
    'AModule':stop(),
    ok.

%%%===================================================================
%%% Internal functions
%%%===================================================================
